# Routes
# This file defines all API V2 routes (Higher priority routes first)
# ~~~~

###
#  summary: Creates an API session
#  description: >-
#    Creates a new API session. Pass an API key to create an authenticated
#    session. To create a public session, don't pass an Authorization header.
#
#    When passing an API key, you should use the scheme `OreApi`, and
#    parameter `apikey`. An example would be `Authorization: OreApi apikey="foobar"`.
#
#    The returned session should be specified in all following request as the
#    parameter `session`. An example would be `Authorization: OreApi session="noisses"`
#  tags:
#    - Sessions (Authentication)
#  security:
#    - Key: []
#    - {}
#  requestBody:
#    content:
#      application/json:
#        schema:
#          $ref: '#/components/schemas/controllers.apiv2.ApiV2Controller.ApiSessionProperties'
#  responses:
#    200:
#      description: Ok
#      content:
#        application/json:
#          schema:
#            $ref: '#/components/schemas/controllers.apiv2.ApiV2Controller.ReturnedApiSession'
#    400:
#      description: Sent if the requested expiration can't be used.
#    401:
#      description: Api key missing or invalid
#      headers:
#        WWW_Authenticate:
#          schema:
#            type: string
###
+nocsrf
POST    /authenticate                                        @controllers.apiv2.Authentication.authenticate()

### NoDocs ###
POST    /authenticate/user                                   @controllers.apiv2.Authentication.authenticateUser()

###
#  summary: Invalidates the API session used for the request.
#  description: >-
#    Invalidates the API session used to make this call.
#  tags:
#    - Sessions (Authentication)
#  responses:
#    204:
#      description: Session invalidated
#    400:
#      description: Sent if this request was not made with a session.
#    401:
#      $ref: '#/components/responses/UnauthorizedError'
#    403:
#      $ref: '#/components/responses/ForbiddenError'
###
+nocsrf
DELETE /sessions/current                                     @controllers.apiv2.Authentication.deleteSession()

###
#  summary: Creates an API key
#  description: Creates an API key. Requires the `edit_api_keys` permission.
#  tags:
#    - Keys
#  requestBody:
#    required: true
#    content:
#      application/json:
#        schema:
#          $ref: '#/components/schemas/controllers.apiv2.ApiV2Controller.KeyToCreate'
#  responses:
#    200:
#      description: Ok
#      content:
#        application/json:
#          schema:
#            $ref: '#/components/schemas/controllers.apiv2.ApiV2Controller.CreatedApiKey'
#
#    401:
#      $ref: '#/components/responses/UnauthorizedError'
#    403:
#      $ref: '#/components/responses/ForbiddenError'
###
+nocsrf
POST    /keys                                                @controllers.apiv2.Keys.createKey()

###
#  summary: Delete an API key
#  description: Delete an API key. Requires the `edit_api_keys` permission.
#  tags:
#    - Keys
#  parameters:
#    - name: name
#      description: The name of the key to delete
#  responses:
#    204:
#      description: Key deleted
#    401:
#      $ref: '#/components/responses/UnauthorizedError'
#    403:
#      $ref: '#/components/responses/ForbiddenError'
###
+nocsrf
DELETE  /keys                                                @controllers.apiv2.Keys.deleteKey(name)



###
#  summary: Checks your permissions
#  description: Checks your permissions with a given session in a given context
#  tags:
#    - Permissions
#  parameters:
#    - name: projectOwner
#      description: The owner of the project to get the permissions for. Must not be used together with `organizationName`
#    - name: projectSlug
#      description: The project slug of the project get the permissions for. Must not be used together with `organizationName`
#    - name: organizationName
#      description: The organization to check permissions in. Must not be used together with `projectOwner` and `projectSlug`
#  responses:
#    200:
#      description: Ok
#      content:
#        application/json:
#          schema:
#            $ref: '#/components/schemas/controllers.apiv2.ApiV2Controller.KeyPermissions'
#    401:
#      $ref: '#/components/responses/UnauthorizedError'
###
GET     /permissions                                         @controllers.apiv2.Permissions.showPermissions(projectOwner: Option[String], projectSlug: Option[String], organizationName: Option[String])

###
#  summary: Do an AND permission check
#  description: Checks that you have all the permissions passed in with a given session in a given context
#  tags:
#    - Permissions
#  parameters:
#    - name: permissions
#      description: The permissions to check
#    - name: projectOwner
#      description: The owner of the project to check permissions in. Must not be used together with `organizationName`
#    - name: projectSlug
#      description: The project slug of the project to check permissions in. Must not be used together with `organizationName`
#    - name: organizationName
#      description: The organization to check permissions in. Must not be used together with `projectOwner` and `projectSlug`
#  responses:
#    200:
#      description: Ok
#      content:
#        application/json:
#          schema:
#            $ref: '#/components/schemas/controllers.apiv2.ApiV2Controller.PermissionCheck'
#    401:
#      $ref: '#/components/responses/UnauthorizedError'
###
GET     /permissions/hasAll                                  @controllers.apiv2.Permissions.hasAll(permissions: Seq[NamedPermission], projectOwner: Option[String], projectSlug: Option[String], organizationName: Option[String])

###
#  summary: Do an OR permission check
#  description: Checks that you have any of the permissions passed in with a given session in a given context
#  tags:
#    - Permissions
#  parameters:
#    - name: permissions
#      description: The permissions to check
#    - name: projectOwner
#      description: The owner of the project to check permissions in. Must not be used together with `organizationName`
#    - name: projectSlug
#      description: The project slug of the project to check permissions in. Must not be used together with `organizationName`
#    - name: organizationName
#      description: The organization to check permissions in. Must not be used together with `projectOwner` and `projectSlug`
#  responses:
#    200:
#      description: Ok
#      content:
#        application/json:
#          schema:
#            $ref: '#/components/schemas/controllers.apiv2.ApiV2Controller.PermissionCheck'
#    401:
#      $ref: '#/components/responses/UnauthorizedError'
###
GET     /permissions/hasAny                                  @controllers.apiv2.Permissions.hasAny(permissions: Seq[NamedPermission], projectOwner: Option[String], projectSlug: Option[String], organizationName: Option[String])



###
#  summary: Searches the projects on Ore
#  description: Searches all the projects on ore, or for a single user. Requires the `view_public_info` permission.
#  tags:
#    - Projects
#  parameters:
#    - name: q
#      description: The query to use when searching
#    - name: categories
#      description: Restrict your search to a list of categories
#      required: false
#    - name: platforms
#      required: false
#      description: Only show projects that have a promoted version with a platform given in this list. Should be formated either as `platform` or `platform:version`.
#    - name: stability
#      description: Only return projects that has a promoted version with the given stability
#    - name: owner
#      description: Limit the search to a specific user
#    - name: sort
#      description: How to sort the projects
#    - name: relevance
#      description: If how relevant the project is to the given query should be used when sorting the projects
#    - name: exact
#      description: If specified, changes the search to only look for exact mathes of the query to the project name.
#    - name: limit
#      description: The maximum amount of projects to return
#    - name: offset
#      description: Where to start searching
#  responses:
#    200:
#      description: Ok
#      content:
#        application/json:
#          schema:
#            $ref: '#/components/schemas/controllers.apiv2.ApiV2Controller.PaginatedProjectResult'
#    401:
#      $ref: '#/components/responses/UnauthorizedError'
#    403:
#      $ref: '#/components/responses/ForbiddenError'
###
GET     /projects                                            @controllers.apiv2.Projects.listProjects(q: Option[String], categories: Seq[Category], platforms: Seq[String], stability: Seq[Version.Stability], owner: Option[String], sort: Option[ProjectSortingStrategy], relevance: Option[Boolean], exact: Option[Boolean], limit: Option[Long], offset: Long ?= 0)

###
#  summary: Creates a new project
#  description: Creates a new project and returns it. Requires the `create_project` permission.
#  tags:
#    - Projects
#  requestBody:
#    required: true
#    content:
#      application/json:
#        schema:
#          $ref: '#/components/schemas/controllers.apiv2.ApiV2Controller.ApiV2ProjectTemplate'
#  responses:
#    201:
#      description: Ok
#      content:
#        application/json:
#          schema:
#            $ref: '#/components/schemas/models.protocols.APIV2.Project'
#    401:
#      $ref: '#/components/responses/UnauthorizedError'
#    403:
#      $ref: '#/components/responses/ForbiddenError'
###
+nocsrf
POST     /projects                                           @controllers.apiv2.Projects.createProject()

###
#  summary: Returns info on a specific project
#  description: Returns info on a specific project. Requires the `view_public_info` permission.
#  tags:
#    - Projects
#  parameters:
#    - name: projectOwner
#      description: The owner of the project to return
#    - name: projectSlug
#      description: The project slug of the project to return
#  responses:
#    200:
#      description: Ok
#      content:
#        application/json:
#          schema:
#            $ref: '#/components/schemas/models.protocols.APIV2.Project'
#    401:
#      $ref: '#/components/responses/UnauthorizedError'
#    403:
#      $ref: '#/components/responses/ForbiddenError'
###
GET     /projects/:projectOwner/:projectSlug                                  @controllers.apiv2.Projects.showProject(projectOwner, projectSlug)

###
#  summary: Edits an existing project
#  description: Edits the editable parts of an existing project. Requires the `edit_subject_settings` permission.
#  tags:
#    - Projects
#  requestBody:
#    required: true
#    content:
#      application/json:
#        schema:
#          type: object
#          properties:
#            name:
#              type: string
#            owner_name:
#              type: string
#            category:
#              $ref: '#/components/schemas/Category'
#            description:
#              type: string
#              nullable: true
#            settings:
#              type: object
#              properties:
#                keywords:
#                  type: array
#                  items:
#                    type: string
#                  maxItems: 5
#                  uniqueItems: true
#                  nullable: true
#                homepage:
#                  type: string
#                  nullable: true
#                issues:
#                  type: string
#                  nullable: true
#                sources:
#                  type: string
#                  nullable: true
#                support:
#                  type: string
#                  nullable: true
#                license:
#                  $ref: '#/components/schemas/models.protocols.APIV2.ProjectLicense'
#                forum_sync:
#                  type: boolean
#
#  responses:
#    200:
#      description: Ok
#      content:
#        application/json:
#          schema:
#            type: array
#            items:
#              $ref: '#/components/schemas/models.protocols.APIV2.Project'
#
#    401:
#      $ref: '#/components/responses/UnauthorizedError'
#    403:
#      $ref: '#/components/responses/ForbiddenError'
###
PATCH   /projects/:projectOwner/:projectSlug                                  @controllers.apiv2.Projects.editProject(projectOwner, projectSlug)

###
#  summary: Permanently deletes a project.
#  description: >-
#    Permanently deletes a project and everything associated with it.
#    Requires the `hard_delete_project` permission.
#  tags:
#    - Projects
#  parameters:
#    - name: projectOwner
#      description: The owner of the project to delete
#    - name: projectSlug
#      description: The project slug of the project to delete
#  responses:
#    204:
#      description: Deleted
#    401:
#      $ref: '#/components/responses/UnauthorizedError'
#    403:
#      $ref: '#/components/responses/ForbiddenError'
###
DELETE  /projects/:projectOwner/:projectSlug                                  @controllers.apiv2.Projects.hardDeleteProject(projectOwner, projectSlug)

###
#  summary: Returns the description for a specific project
#  description: >-
#    Returns the long description shown on the home page for a project.
#    Requires the `view_public_info` permission.
#  tags:
#    - Projects
#  parameters:
#    - name: projectOwner
#      description: The owner of the project which description to return
#    - name: projectSlug
#      description: The project slug of project which description to return
#  responses:
#    200:
#      description: Ok
#      content:
#        application/json:
#          schema:
#            type: object
#            properties:
#              description:
#                 type: string
#    401:
#      $ref: '#/components/responses/UnauthorizedError'
#    403:
#      $ref: '#/components/responses/ForbiddenError'
###
GET     /projects/:projectOwner/:projectSlug/description                      @controllers.apiv2.Projects.showProjectDescription(projectOwner, projectSlug)

###
#  summary: Returns the members of a project
#  description: >-
#    Returns the members of a project. Requires the `view_public_info` permission.
#    Unless the user also has the 'manage_subject_members' permission, only accepted roles
#    will be shown.
#  tags:
#    - Projects
#  parameters:
#    - name: projectOwner
#      description: The owner of the project to return members for
#    - name: projectSlug
#      description: The project slug of project to return members for
#    - name: limit
#      description: The maximum amount of members to return
#    - name: offset
#      description: Where to start returning
#  responses:
#    200:
#      description: Ok
#      content:
#        application/json:
#          schema:
#            type: array
#            items:
#              $ref: '#/components/schemas/models.protocols.APIV2.Member'
#    401:
#      $ref: '#/components/responses/UnauthorizedError'
#    403:
#      $ref: '#/components/responses/ForbiddenError'
###
GET     /projects/:projectOwner/:projectSlug/members                          @controllers.apiv2.Projects.showMembers(projectOwner, projectSlug, limit: Option[Long], offset: Long ?= 0)

###
#  summary: Updates the members of a project
#  description: >-
#    Updates the members of a project. Requires the `manage_subject_members` permission.
#  tags:
#    - Projects
#  parameters:
#    - name: projectOwner
#      description: The owner of the project to update members for
#    - name: projectSlug
#      description: The project slug of project to update members for
#  requestBody:
#    required: true
#    content:
#      application/json:
#        schema:
#          type: array
#          items:
#            $ref: '#/components/schemas/controllers.apiv2.helpers.Members.MemberUpdate'
#  responses:
#    204:
#      description: Ok
#    401:
#      $ref: '#/components/responses/UnauthorizedError'
#    403:
#      $ref: '#/components/responses/ForbiddenError'
###
POST    /projects/:projectOwner/:projectSlug/members                          @controllers.apiv2.Projects.updateMembers(projectOwner, projectSlug)

###
#  summary: Returns the stats for a project
#  description: >-
#    Returns the stats(downloads, views) for a project per day for a certain
#    date range. Requires the `is_subject_member` permission.
#  tags:
#    - Projects
#  parameters:
#    - name: projectOwner
#      description: The owner of the project to return the stats for
#    - name: projectSlug
#      description: The project slug of project to return the stats for
#    - name: fromDate
#      description: The first date to include in the result
#      format: date
#    - name: toDate
#      description: The last date to include in the result
#      format: date
#  responses:
#    200:
#      description: Ok
#      content:
#        application/json:
#          schema:
#            type: object
#            description: A map of dates to the stats for that day
#            additionalProperties:
#              $ref: '#/components/schemas/models.protocols.APIV2.ProjectStatsDay'
#    401:
#      $ref: '#/components/responses/UnauthorizedError'
#    403:
#      $ref: '#/components/responses/ForbiddenError'
###
GET     /projects/:projectOwner/:projectSlug/stats                            @controllers.apiv2.Projects.showProjectStats(projectOwner, projectSlug, fromDate: String, toDate: String)

###
#  summary: Sets a project's visibility.
#  description: >-
#    Sets a project's visibility. The required permissions vary depending on the wanted visibility.
#    Having reviewer permission gurantees access to all visibilities no matter the circumstances.
#    In all other cases these rules apply.
#    - 'needsApproval' requires 'edit_settings', and that the current visibility is 'needsChanges'.
#    - 'softDelete' requires 'delete_project'.
#  tags:
#    - Projects
#  parameters:
#    - name: projectOwner
#      description: The owner of the project to change the visibility of
#    - name: projectSlug
#      description: The project slug of project to change the visibility of
#  requestBody:
#    required: true
#    content:
#      application/json:
#        schema:
#          $ref: '#/components/schemas/controllers.apiv2.helpers.EditVisibility'
#  responses:
#    204:
#      description: Project updated
#    401:
#      $ref: '#/components/responses/UnauthorizedError'
#    403:
#      $ref: '#/components/responses/ForbiddenError'
###
POST    /projects/:projectOwner/:projectSlug/visibility                       @controllers.apiv2.Projects.setProjectVisibility(projectOwner, projectSlug)

###
#  summary: Sets a project's discourse topic settings.
#  description: >-
#    Edit's a project's Discourse settings manually.
#    Needs the `edit_admin_settings` permission.
#  tags:
#    - Projects
#  parameters:
#    - name: projectOwner
#      description: The owner of the project to change the discourse settings of
#    - name: projectSlug
#      description: The project slug of project to change the discourse settings of
#  requestBody:
#    required: true
#    content:
#      application/json:
#        schema:
#          $ref: '#/components/schemas/controllers.apiv2.Projects.DiscourseModifyTopicSettings'
#  responses:
#    204:
#      description: Project updated
#    401:
#      $ref: '#/components/responses/UnauthorizedError'
#    403:
#      $ref: '#/components/responses/ForbiddenError'
###
POST    /projects/:projectOwner/:projectSlug/external/_discourse              @controllers.apiv2.Projects.editDiscourseSettings(projectOwner, projectSlug)



###
#  summary: Returns the versions of a project
#  description: Returns the versions of a project. Requires the `view_public_info` permission in the project or owning organization.
#  tags:
#    - Versions
#  parameters:
#    - name: projectOwner
#      description: The owner of the project to return versions for
#    - name: projectSlug
#      description: The project slug of project to return versions for
#    - name: platforms
#      required: false
#      description: Only show versions that with a platform given in this list. Should be formated either as `platform` or `platform:version`.
#    - name: stability
#      description: Only show versions with the given stability
#    - name: releaseType
#      description: Only show versions with the given release type
#    - name: limit
#      description: The maximum amount of versions to return
#    - name: offset
#      description: Where to start returning
#  responses:
#    200:
#      description: Ok
#      content:
#        application/json:
#          schema:
#            $ref: '#/components/schemas/controllers.apiv2.ApiV2Controller.PaginatedVersionResult'
#    401:
#      $ref: '#/components/responses/UnauthorizedError'
#    403:
#      $ref: '#/components/responses/ForbiddenError'
###
GET     /projects/:projectOwner/:projectSlug/versions                         @controllers.apiv2.Versions.listVersions(projectOwner, projectSlug, platforms: Seq[String], stability: Seq[Version.Stability], releaseType: Seq[Version.ReleaseType], limit: Option[Long], offset: Long ?= 0)

###
#  summary: Returns a specific version of a project
#  description: Returns a specific version of a project. Requires the `view_public_info` permission in the project or owning organization.
#  tags:
#    - Versions
#  parameters:
#    - name: projectOwner
#      description: The owner of the project to return the version for
#    - name: projectSlug
#      description: The project slug of project to return the version for
#    - name: name
#      description: The name of the version to return
#  responses:
#    200:
#      description: Ok
#      content:
#        application/json:
#          schema:
#            $ref: '#/components/schemas/models.protocols.APIV2.Version'
#    401:
#      $ref: '#/components/responses/UnauthorizedError'
#    403:
#      $ref: '#/components/responses/ForbiddenError'
###
GET     /projects/:projectOwner/:projectSlug/versions/:name                   @controllers.apiv2.Versions.showVersionAction(projectOwner, projectSlug, name)

###
#  summary: Edits an existing version
#  description: >-
#    Edits the editable parts of an existing version. Requires the
#    `edit_version` permission. Tags are not part of this endpoint.
#  tags:
#    - Versions
#  parameters:
#    - name: projectOwner
#      description: The owner of the project whose version you will edit
#    - name: projectSlug
#      description: The project slug of project whose version you will edit
#    - name: name
#      description: The name of the version to edit
#  requestBody:
#    required: true
#    content:
#      application/json:
#        schema:
#          $ref: '#/components/schemas/controllers.apiv2.ApiV2Controller.EditableVersion'
#  responses:
#    200:
#      description: Ok
#      content:
#        application/json:
#          schema:
#            $ref: '#/components/schemas/models.protocols.APIV2.Version'
#
#    401:
#      $ref: '#/components/responses/UnauthorizedError'
#    403:
#      $ref: '#/components/responses/ForbiddenError'
###
PATCH   /projects/:projectOwner/:projectSlug/versions/:name                   @controllers.apiv2.Versions.editVersion(projectOwner, projectSlug, name)

###
#  summary: Permanently deletes a version.
#  description: >-
#    Permanently deletes a version and everything associated with it.
#    Requires the `hard_delete_version` permission.
#  tags:
#    - Versions
#  parameters:
#    - name: projectOwner
#      description: The owner of the project whose version you will delete
#    - name: projectSlug
#      description: The project slug of project whose version you will delete
#    - name: name
#      description: The name of the version to delete
#  responses:
#    204:
#      description: Deleted
#    401:
#      $ref: '#/components/responses/UnauthorizedError'
#    403:
#      $ref: '#/components/responses/ForbiddenError'
###
DELETE  /projects/:projectOwner/:projectSlug/versions/:name                   @controllers.apiv2.Versions.hardDeleteVersion(projectOwner, projectSlug, name)

###
#  summary: Sets a version's visibility.
#  description: >-
#    Sets a version's visibility. The required permissions vary depending on the wanted visibility.
#    Having reviewer permission gurantees access to all visibilities no matter the circumstances.
#    In all other cases these rules apply.
#    - 'needsApproval' requires 'edit_settings', and that the current visibility is 'needsChanges'.
#    - 'softDelete' requires 'delete_version'.
#  tags:
#    - Versions
#  parameters:
#    - name: projectOwner
#      description: The owner of the project whose version you will edit the visibility of
#    - name: projectSlug
#      description: The project slug of project whose version you will edit the visibility of
#    - name: name
#      description: The name of the version to edit
#  requestBody:
#    required: true
#    content:
#      application/json:
#        schema:
#          $ref: '#/components/schemas/controllers.apiv2.helpers.EditVisibility'
#  responses:
#    204:
#      description: Version updated
#    401:
#      $ref: '#/components/responses/UnauthorizedError'
#    403:
#      $ref: '#/components/responses/ForbiddenError'
###
POST    /projects/:projectOwner/:projectSlug/versions/:name/visibility        @controllers.apiv2.Versions.setVersionVisibility(projectOwner, projectSlug, name)

###
#  summary: Returns the changelog for a version
#  description: >-
#    Returns the changelog for a version. Requires the `view_public_info`
#    permission in the project or owning organization.
#  tags:
#    - Versions
#  parameters:
#    - name: projectOwner
#      description: The owner of the project to return the version changelog for
#    - name: projectSlug
#      description: The project slug of project to return the version changelog for
#    - name: name
#      description: The name of the version to return the changelog for
#  responses:
#    200:
#      description: Ok
#      content:
#        application/json:
#          schema:
#            $ref: '#/components/schemas/models.protocols.APIV2.VersionChangelog'
#    401:
#      $ref: '#/components/responses/UnauthorizedError'
#    403:
#      $ref: '#/components/responses/ForbiddenError'
###
GET     /projects/:projectOwner/:projectSlug/versions/:name/changelog          @controllers.apiv2.Versions.showVersionChangelog(projectOwner, projectSlug, name)

###
#  summary: Updates the changelog for a version
#  description: >-
#    Updates the changelog for a version. Requires the `edit_version`
#    permission in the project or owning organization.
#  tags:
#    - Versions
#  parameters:
#    - name: projectOwner
#      description: The owner of the project to update the version changelog for
#    - name: projectSlug
#      description: The project slug of project to update the version changelog for
#    - name: name
#      description: The name of the version to update the changelog for
#  responses:
#    204:
#      description: Ok
#    401:
#      $ref: '#/components/responses/UnauthorizedError'
#    403:
#      $ref: '#/components/responses/ForbiddenError'
###
PUT     /projects/:projectOwner/:projectSlug/versions/:name/changelog          @controllers.apiv2.Versions.updateChangelog(projectOwner, projectSlug, name)

###
#  summary: Sets a versions's discourse post settings.
#  description: >-
#    Edit's a version's Discourse settings manually.
#    Needs the `edit_admin_settings` permission.
#  tags:
#    - Versions
#  parameters:
#    - name: projectOwner
#      description: The owner of the project which version to change the discourse settings of
#    - name: projectSlug
#      description: The project slug of project which version to change the discourse settings of
#    - name: name
#      description: The name of the version to update the settings of
#  requestBody:
#    required: true
#    content:
#      application/json:
#        schema:
#          $ref: '#/components/schemas/controllers.apiv2.Versions.DiscourseModifyPostSettings'
#  responses:
#    204:
#      description: Version updated
#    401:
#      $ref: '#/components/responses/UnauthorizedError'
#    403:
#      $ref: '#/components/responses/ForbiddenError'
###
POST    /projects/:projectOwner/:projectSlug/versions/:name/external/_discourse  @controllers.apiv2.Versions.editDiscourseSettings(projectOwner, projectSlug, name)

###
#  summary: Returns the stats for a version
#  description: >-
#    Returns the stats(downloads) for a version per day for a certain
#    date range. Requires the `is_subject_member` permission.
#  tags:
#    - Versions
#  parameters:
#    - name: projectOwner
#      description: The owner of the project which version to return the stats for
#    - name: projectSlug
#      description: The project slug of project which version to return the stats for
#    - name: version
#      description: The version to return the stats for
#    - name: fromDate
#      description: The first date to include in the result
#      format: date
#    - name: toDate
#      description: The last date to include in the result
#      format: date
#  responses:
#    200:
#      description: Ok
#      content:
#        application/json:
#          schema:
#            type: object
#            description: A map of dates to the stats for that day
#            additionalProperties:
#              $ref: '#/components/schemas/models.protocols.APIV2.VersionStatsDay'
#    401:
#      $ref: '#/components/responses/UnauthorizedError'
#    403:
#      $ref: '#/components/responses/ForbiddenError'
###
GET     /projects/:projectOwner/:projectSlug/versions/:name/stats          @controllers.apiv2.Versions.showVersionStats(projectOwner, projectSlug, name, fromDate: String, toDate: String)

###
#  summary: Scan a plugin file.
#  description: >-
#    Scan a plugin file for future upload. Use this before uploading a version to
#    see which tags Ore will assign the file. Requires the `create_version`
#    permission in the project or owning organization.
#  tags:
#    - Versions
#  parameters:
#    - name: projectOwner
#      description: The owner of the project to scan the file for
#    - name: projectSlug
#      description: The project slug of project to scan the file for
#  requestBody:
#    required: true
#    content:
#      multipart/form-data:
#        schema:
#          type: object
#          properties:
#            plugin-file:
#              type: string
#              format: binary
#              description: The jar/zip file to upload
#  responses:
#    200:
#      description: Ok
#      content:
#        application/json:
#          schema:
#            $ref: '#/components/schemas/models.protocols.APIV2.Version'
#
#    401:
#      $ref: '#/components/responses/UnauthorizedError'
#    403:
#      $ref: '#/components/responses/ForbiddenError'
###
+nocsrf
PUT    /projects/:projectOwner/:projectSlug/versions/scan                     @controllers.apiv2.Versions.scanVersion(projectOwner, projectSlug)

###
#  summary: Creates a new version
#  description: Creates a new version for a project. Requires the `create_version` permission in the project or owning organization.
#  tags:
#    - Versions
#  parameters:
#    - name: projectOwner
#      description: The owner of the project to create the version for
#    - name: projectSlug
#      description: The project slug of project to create the version for
#  requestBody:
#    required: true
#    content:
#      multipart/form-data:
#        schema:
#          type: object
#          properties:
#            plugin-info:
#              $ref: '#/components/schemas/DeployVersionInfo'
#            plugin-file:
#              type: string
#              format: binary
#              description: The jar/zip file to upload
#        encoding:
#          plugin-info:
#            contentType: application/json, application/octet-stream
#  responses:
#    201:
#      description: Ok
#      content:
#        application/json:
#          schema:
#            $ref: '#/components/schemas/models.protocols.APIV2.Version'
#
#    401:
#      $ref: '#/components/responses/UnauthorizedError'
#    403:
#      $ref: '#/components/responses/ForbiddenError'
###
+nocsrf
POST    /projects/:projectOwner/:projectSlug/versions                         @controllers.apiv2.Versions.deployVersion(projectOwner, projectSlug)

###
#  summary: Returns all the pages for a project
#  description: >-
#    Returns a list of all the pages of the project. Requires the `view_public_info`
#    permission in the project or owning organization.
#
#    **WARNING: This API is subject to change, maybe very little, maybe dramatically.**
#  tags:
#    - Pages
#  parameters:
#    - name: projectOwner
#      description: The owner of the project to return the pages for
#    - name: projectSlug
#      description: The project slug of project to return the pages for
#    - name: page
#      description: The slug of the pages to return
#  responses:
#    200:
#      description: Ok
#      content:
#        application/json:
#          schema:
#            $ref: '#/components/schemas/models.protocols.APIV2.PageList'
#    401:
#      $ref: '#/components/responses/UnauthorizedError'
#    403:
#      $ref: '#/components/responses/ForbiddenError'
###
GET     /projects/:projectOwner/:projectSlug/_pages                           @controllers.apiv2.Pages.showPages(projectOwner, projectSlug)

###
#  summary: Returns the given page
#  description: >-
#    Returns a page of the project. Requires the `view_public_info`
#    permission in the project or owning organization.
#
#    **WARNING: This API is subject to change, maybe very little, maybe dramatically.**
#  tags:
#    - Pages
#  parameters:
#    - name: projectOwner
#      description: The owner of the project to return the page for
#    - name: projectSlug
#      description: The project slug of project to return the page for
#    - name: page
#      description: The slug of the page to return
#  responses:
#    200:
#      description: Ok
#      content:
#        application/json:
#          schema:
#            $ref: '#/components/schemas/models.protocols.APIV2.Page'
#    401:
#      $ref: '#/components/responses/UnauthorizedError'
#    403:
#      $ref: '#/components/responses/ForbiddenError'
###
GET     /projects/:projectOwner/:projectSlug/_pages/*page       @controllers.apiv2.Pages.showPageAction(projectOwner, projectSlug, page)

###
#  summary: Creates or updates a page
#  description: >-
#    Creates or updates a page in the given project. Requires the `edit_page`
#    permission in the project or owning organization.
#
#    **WARNING: This API is subject to change, maybe very little, maybe dramatically.**
#  tags:
#    - Pages
#  requestBody:
#    required: true
#    content:
#      application/json:
#        schema:
#          $ref: '#/components/schemas/models.protocols.APIV2.Page'
#  responses:
#    200:
#      description: Page updated
#      content:
#        application/json:
#          schema:
#            $ref: '#/components/schemas/models.protocols.APIV2.Page'
#    201:
#      description: Page created
#      content:
#        application/json:
#          schema:
#            $ref: '#/components/schemas/models.protocols.APIV2.Page'
#    401:
#      $ref: '#/components/responses/UnauthorizedError'
#    403:
#      $ref: '#/components/responses/ForbiddenError'
###
+nocsrf
PUT     /projects/:projectOwner/:projectSlug/_pages/*page                     @controllers.apiv2.Pages.putPage(projectOwner, projectSlug, page)

###
#  summary: Updates a page
#  description: >-
#    Updates a page in the given project. Requires the `edit_page`
#    permission in the project or owning organization.
#
#    **WARNING: This API is subject to change, maybe very little, maybe dramatically.**
#  tags:
#    - Pages
#  requestBody:
#    required: true
#    content:
#      application/json:
#        schema:
#          $ref: '#/components/schemas/controllers.apiv2.Pages.PatchPage'
#  responses:
#    200:
#      description: Page updated
#      content:
#        application/json:
#          schema:
#            $ref: '#/components/schemas/models.protocols.APIV2.Page'
#    401:
#      $ref: '#/components/responses/UnauthorizedError'
#    403:
#      $ref: '#/components/responses/ForbiddenError'
###
+nocsrf
PATCH   /projects/:projectOwner/:projectSlug/_pages/*page                     @controllers.apiv2.Pages.patchPage(projectOwner, projectSlug, page)

###
#  summary: Deletes a page
#  description: >-
#    Deletes a page in the given project. Requires the `edit_page`
#    permission in the project or owning organization.
#
#    **WARNING: This API is subject to change, maybe very little, maybe dramatically.**
#  tags:
#    - Pages
#  responses:
#    204:
#      description: Page deleted
#    401:
#      $ref: '#/components/responses/UnauthorizedError'
#    403:
#      $ref: '#/components/responses/ForbiddenError'
###
+nocsrf
DELETE   /projects/:projectOwner/:projectSlug/_pages/*page                     @controllers.apiv2.Pages.deletePage(projectOwner, projectSlug, page)

### NoDocs ###
+nocsrf
GET      /projects/:projectOwner/:projectSlug/_projectData                     @controllers.apiv2.Projects.projectData(projectOwner, projectSlug)

###
#  summary: Creates a webhook for this project
#  description: >-
#    Creates a webhook for this project. Requires the `edit_webhooks`
#    permission in the project or owning organization.
#  tags:
#    - Webhooks
#  requestBody:
#    required: true
#    content:
#      application/json:
#        schema:
#          $ref: '#/components/schemas/controllers.apiv2.Webhooks.CreateWebhookRequest'
#  responses:
#    201:
#      description: Webhook created
#      content:
#        application/json:
#          schema:
#            $ref: '#/components/schemas/models.protocols.APIV2.Webhook'
#    401:
#      $ref: '#/components/responses/UnauthorizedError'
#    403:
#      $ref: '#/components/responses/ForbiddenError'
#  callbacks:
#    ping:
#      '{$request.body#/callback_url}':
#        post:
#          security: []
#          description: >-
#            All webhooks (with the exception of Discord formatted ones) need
#            to reply with OK to this message. Ore uses this to check that the
#            webhook works.
#          parameters:
#            - $ref: '#/components/parameters/webhookEventTypeHeader'
#            - $ref: '#/components/parameters/webhookTimestampHeader'
#            - $ref: '#/components/parameters/webhookSignatureHeader'
#          requestBody:
#            required: true
#            content:
#              application/json:
#                schema:
#                  type: object
#                  properties:
#                    webhook:
#                      $ref: '#/components/schemas/models.protocols.APIV2.WebhookPostData'
#          responses:
#            200:
#              description: Ok
#    version_created:
#      '{$request.body#/callback_url}':
#        post:
#          security: []
#          parameters:
#            - $ref: '#/components/parameters/webhookEventTypeHeader'
#            - $ref: '#/components/parameters/webhookTimestampHeader'
#            - $ref: '#/components/parameters/webhookSignatureHeader'
#          requestBody:
#            required: true
#            content:
#              application/json:
#                schema:
#                  type: object
#                  properties:
#                    webhook:
#                      $ref: '#/components/schemas/models.protocols.APIV2.WebhookPostData'
#                    data:
#                      $ref: '#/components/schemas/models.protocols.APIV2.Version'
#          responses:
#            200:
#              description: Ok
#    version_changelog_edited:
#      '{$request.body#/callback_url}':
#        post:
#          security: []
#          parameters:
#            - $ref: '#/components/parameters/webhookEventTypeHeader'
#            - $ref: '#/components/parameters/webhookTimestampHeader'
#            - $ref: '#/components/parameters/webhookSignatureHeader'
#          requestBody:
#            required: true
#            content:
#              application/json:
#                schema:
#                  type: object
#                  properties:
#                    webhook:
#                      $ref: '#/components/schemas/models.protocols.APIV2.WebhookPostData'
#                    data:
#                      $ref: '#/components/schemas/models.protocols.APIV2.VersionChangelog'
#          responses:
#            200:
#              description: Ok
#    version_edited:
#      '{$request.body#/callback_url}':
#        post:
#          security: []
#          parameters:
#            - $ref: '#/components/parameters/webhookEventTypeHeader'
#            - $ref: '#/components/parameters/webhookTimestampHeader'
#            - $ref: '#/components/parameters/webhookSignatureHeader'
#          requestBody:
#            required: true
#            content:
#              application/json:
#                schema:
#                  type: object
#                  properties:
#                    webhook:
#                      $ref: '#/components/schemas/models.protocols.APIV2.WebhookPostData'
#                    data:
#                      $ref: '#/components/schemas/models.protocols.APIV2.Version'
#          responses:
#            200:
#              description: Ok
#    version_visibility_change:
#      '{$request.body#/callback_url}':
#        post:
#          security: []
#          parameters:
#            - $ref: '#/components/parameters/webhookEventTypeHeader'
#            - $ref: '#/components/parameters/webhookTimestampHeader'
#            - $ref: '#/components/parameters/webhookSignatureHeader'
#          requestBody:
#            required: true
#            content:
#              application/json:
#                schema:
#                  type: object
#                  properties:
#                    webhook:
#                      $ref: '#/components/schemas/models.protocols.APIV2.WebhookPostData'
#                    data:
#                      $ref: '#/components/schemas/models.protocols.APIV2.VersionVisibilityChange'
#          responses:
#            200:
#              description: Ok
#    version_deleted:
#      '{$request.body#/callback_url}':
#        post:
#          security: []
#          parameters:
#            - $ref: '#/components/parameters/webhookEventTypeHeader'
#            - $ref: '#/components/parameters/webhookTimestampHeader'
#            - $ref: '#/components/parameters/webhookSignatureHeader'
#          requestBody:
#            required: true
#            content:
#              application/json:
#                schema:
#                  type: object
#                  properties:
#                    webhook:
#                      $ref: '#/components/schemas/models.protocols.APIV2.WebhookPostData'
#                    data:
#                      $ref: '#/components/schemas/models.protocols.APIV2.StandaloneVersionName'
#          responses:
#            200:
#              description: Ok
#    page_created:
#      '{$request.body#/callback_url}':
#        post:
#          security: []
#          parameters:
#            - $ref: '#/components/parameters/webhookEventTypeHeader'
#            - $ref: '#/components/parameters/webhookTimestampHeader'
#            - $ref: '#/components/parameters/webhookSignatureHeader'
#          requestBody:
#            required: true
#            content:
#              application/json:
#                schema:
#                  type: object
#                  properties:
#                    webhook:
#                      $ref: '#/components/schemas/models.protocols.APIV2.WebhookPostData'
#                    data:
#                      $ref: '#/components/schemas/models.protocols.APIV2.PageWithSlug'
#          responses:
#            200:
#              description: Ok
#    page_updated:
#      '{$request.body#/callback_url}':
#        post:
#          security: []
#          parameters:
#            - $ref: '#/components/parameters/webhookEventTypeHeader'
#            - $ref: '#/components/parameters/webhookTimestampHeader'
#            - $ref: '#/components/parameters/webhookSignatureHeader'
#          requestBody:
#            required: true
#            content:
#              application/json:
#                schema:
#                  type: object
#                  properties:
#                    webhook:
#                      $ref: '#/components/schemas/models.protocols.APIV2.WebhookPostData'
#                    data:
#                      $ref: '#/components/schemas/models.protocols.APIV2.PageUpdateWithSlug'
#          responses:
#            200:
#              description: Ok
#    page_deleted:
#      '{$request.body#/callback_url}':
#        post:
#          security: []
#          parameters:
#            - $ref: '#/components/parameters/webhookEventTypeHeader'
#            - $ref: '#/components/parameters/webhookTimestampHeader'
#            - $ref: '#/components/parameters/webhookSignatureHeader'
#          requestBody:
#            required: true
#            content:
#              application/json:
#                schema:
#                  type: object
#                  properties:
#                    webhook:
#                      $ref: '#/components/schemas/models.protocols.APIV2.WebhookPostData'
#                    data:
#                      $ref: '#/components/schemas/models.protocols.APIV2.PageListEntry'
#          responses:
#            200:
#              description: Ok
#    member_changed:
#      '{$request.body#/callback_url}':
#        post:
#          security: []
#          parameters:
#            - $ref: '#/components/parameters/webhookEventTypeHeader'
#            - $ref: '#/components/parameters/webhookTimestampHeader'
#            - $ref: '#/components/parameters/webhookSignatureHeader'
#          requestBody:
#            required: true
#            content:
#              application/json:
#                schema:
#                  type: object
#                  properties:
#                    webhook:
#                      $ref: '#/components/schemas/models.protocols.APIV2.WebhookPostData'
#                    data:
#                       $ref: '#/components/schemas/models.protocols.APIV2.MembersUpdate'
#          responses:
#            200:
#              description: Ok
###
+nocsrf
POST     /projects/:projectOwner/:projectSlug/webhooks                          @controllers.apiv2.Webhooks.createWebhook(projectOwner, projectSlug)

###
#  summary: Show an existing webhook for this project
#  description: >-
#    Show an existing webhook for this project. Requires the `edit_webhooks`
#    permission in the project or owning organization.
#  tags:
#    - Webhooks
#  responses:
#    200:
#      description: Ok
#      content:
#        application/json:
#          schema:
#            $ref: '#/components/schemas/models.protocols.APIV2.Webhook'
#    401:
#      $ref: '#/components/responses/UnauthorizedError'
#    403:
#      $ref: '#/components/responses/ForbiddenError'
###
+nocsrf
GET      /projects/:projectOwner/:projectSlug/webhooks/:webhookId               @controllers.apiv2.Webhooks.getWebhook(projectOwner, projectSlug, webhookId)

###
#  summary: Ping an existing webhook.
#  description: >-
#    Use this to ensure that the webhook is working. If Ore thinks an webhook
#    isn't working, it won't send requests to it. Requires the `edit_webhooks`
#    permission in the project or owning organization.
#  tags:
#    - Webhooks
#  responses:
#    200:
#      description: Pinged webhook
#      content:
#        application/json:
#          schema:
#            $ref: '#/components/schemas/models.protocols.APIV2.Webhook'
#    401:
#      $ref: '#/components/responses/UnauthorizedError'
#    403:
#      $ref: '#/components/responses/ForbiddenError'
###
+nocsrf
POST     /projects/:projectOwner/:projectSlug/webhooks/:webhookId/ping          @controllers.apiv2.Webhooks.pingWebhookAction(projectOwner, projectSlug, webhookId)

###
#  summary: Refresh the secret for an existing webhook.
#  description: >-
#    Refresh the secret for an existing webhook. Note that doing this will
#    cancel the sending of all webhooks that haven't already been sent.
#    Requires the `edit_webhooks` permission in the project or owning organization.
#  tags:
#    - Webhooks
#  responses:
#    200:
#      description: Secret refreshed
#      content:
#        application/json:
#          schema:
#            $ref: '#/components/schemas/models.protocols.APIV2.Webhook'
#    401:
#      $ref: '#/components/responses/UnauthorizedError'
#    403:
#      $ref: '#/components/responses/ForbiddenError'
###
+nocsrf
POST     /projects/:projectOwner/:projectSlug/webhooks/:webhookId/refreshSecret @controllers.apiv2.Webhooks.refreshSecret(projectOwner, projectSlug, webhookId)

###
#  summary: Edit an existing webhook for this project
#  description: >-
#    Edit an existing webhook for this project. Requires the `edit_webhooks`
#    permission in the project or owning organization.
#  tags:
#    - Webhooks
#  requestBody:
#    required: true
#    content:
#      application/json:
#        schema:
#          type: object
#          properties:
#            name:
#              type: string
#              nullable: true
#            callback_url:
#              type: string
#              nullable: true
#            discord_formatted:
#              type: boolean
#              nullable: true
#            events:
#              type: array
#              nullable: true
#              items:
#                $ref: '#/components/schemas/WebhookEventType'
#
#  responses:
#    200:
#      description: Ok
#      content:
#        application/json:
#          schema:
#            $ref: '#/components/schemas/models.protocols.APIV2.Webhook'
#    401:
#      $ref: '#/components/responses/UnauthorizedError'
#    403:
#      $ref: '#/components/responses/ForbiddenError'
###
+nocsrf
PATCH    /projects/:projectOwner/:projectSlug/webhooks/:webhookId               @controllers.apiv2.Webhooks.editWebhook(projectOwner, projectSlug, webhookId)

###
#  summary: Delete an existing webhook for this project
#  description: >-
#    Delete an existing webhook for this project. Requires the `edit_webhooks`
#    permission in the project or owning organization.
#  tags:
#    - Webhooks
#  responses:
#    204:
#      description: Deleted
#    401:
#      $ref: '#/components/responses/UnauthorizedError'
#    403:
#      $ref: '#/components/responses/ForbiddenError'
###
+nocsrf
DELETE   /projects/:projectOwner/:projectSlug/webhooks/:webhookId               @controllers.apiv2.Webhooks.deleteWebhook(projectOwner, projectSlug, webhookId)

### NoDocs ###
GET      /projects/:pluginId/*path                                              @controllers.apiv2.Projects.redirectPluginId(pluginId, path)
### NoDocs ###
POST     /projects/:pluginId/*path                                              @controllers.apiv2.Projects.redirectPluginId(pluginId, path)
### NoDocs ###
PATCH    /projects/:pluginId/*path                                              @controllers.apiv2.Projects.redirectPluginId(pluginId, path)
### NoDocs ###
PUT      /projects/:pluginId/*path                                              @controllers.apiv2.Projects.redirectPluginId(pluginId, path)
### NoDocs ###
DELETE   /projects/:pluginId/*path                                              @controllers.apiv2.Projects.redirectPluginId(pluginId, path)

###
#  summary: Searches the users on Ore
#  description: Searches all the users on ore. Requires the `view_public_info` permission.
#  tags:
#    - Users
#  parameters:
#    - name: q
#      description: The query to use when searching
#    - name: minProjects
#      description: Minimum amount of projects a user needs to have to be returned
#    - name: roles
#      description: The required roles a user needs to have to be returned
#    - name: excludeOrganizations
#      description: If organizations should be excluded from the search. Default is false
#    - name: sort
#      description: How to sort the users
#    - name: sortDescending
#      description: If the result should be sorted in descending or ascending order. Ascending is default.
#    - name: limit
#      description: The maximum amount of projects to return
#    - name: offset
#      description: Where to start searching
#  responses:
#    200:
#      description: Ok
#      content:
#        application/json:
#          schema:
#            $ref: '#/components/schemas/controllers.apiv2.Users.PaginatedUserResult'
#    401:
#      $ref: '#/components/responses/UnauthorizedError'
#    403:
#      $ref: '#/components/responses/ForbiddenError'
###
GET     /users                                                @controllers.apiv2.Users.listUsers(q: Option[String], minProjects: Option[Int], roles: Seq[ore.permission.role.Role], excludeOrganizations: Boolean ?= false, sort: Option[controllers.apiv2.Users.UserSortingStrategy], sortDescending: Boolean ?= false, limit: Option[Long], offset: Long ?= 0)


###
#  summary: Gets a current logged in user
#  description: Gets a current logged in user. Requires the `view_public_info` permission.
#  tags:
#    - Users
#  responses:
#    200:
#      description: Ok
#      content:
#        application/json:
#          schema:
#            $ref: '#/components/schemas/models.protocols.APIV2.User'
#    401:
#      $ref: '#/components/responses/UnauthorizedError'
#    403:
#      $ref: '#/components/responses/ForbiddenError'
###
GET     /users/@me                                            @controllers.apiv2.Users.showCurrentUser()

###
#  summary: Gets a specific user
#  description: Gets a specific user. Requires the `view_public_info` permission.
#  tags:
#    - Users
#  parameters:
#    - name: user
#      description: The user to return
#  responses:
#    200:
#      description: Ok
#      content:
#        application/json:
#          schema:
#            $ref: '#/components/schemas/models.protocols.APIV2.User'
#    401:
#      $ref: '#/components/responses/UnauthorizedError'
#    403:
#      $ref: '#/components/responses/ForbiddenError'
###
GET     /users/:user                                         @controllers.apiv2.Users.showUser(user)

###
#  summary: Gets a specific user's memberships
#  description: >-
#    Gets all the areas where a user is a member.
#    Requires the `view_public_info` permission.
#  tags:
#    - Users
#  parameters:
#    - name: user
#      description: The user to return memberships for
#  responses:
#    200:
#      description: Ok
#      content:
#        application/json:
#          schema:
#            type: array
#            items:
#              $ref: '#/components/schemas/models.protocols.APIV2.Membership'
#    401:
#      $ref: '#/components/responses/UnauthorizedError'
#    403:
#      $ref: '#/components/responses/ForbiddenError'
###
GET     /users/:user/memberships                             @controllers.apiv2.Users.getMemberships(user)

###
#  summary: Gets the starred projects for a specific user
#  description: Gets the starred projects for a specific user. Requires the `view_public_info` permission.
#  tags:
#    - Users
#  parameters:
#    - name: user
#      description: The user to return for
#    - name: sort
#      description: How to sort the projects
#    - name: limit
#      description: The maximum amount of projects to return
#    - name: offset
#      description: Where to start searching
#  responses:
#    200:
#      description: Ok
#      content:
#        application/json:
#          schema:
#            $ref: '#/components/schemas/controllers.apiv2.ApiV2Controller.PaginatedCompactProjectResult'
#    401:
#      $ref: '#/components/responses/UnauthorizedError'
#    403:
#      $ref: '#/components/responses/ForbiddenError'
###
GET     /users/:user/starred                                 @controllers.apiv2.Users.showStarred(user, sort: Option[ProjectSortingStrategy], limit: Option[Long], offset: Long ?= 0)

###
#  summary: Gets the watched projects for a specific user
#  description: Gets the watched projects for a specific user. Requires the `view_public_info` permission.
#  tags:
#    - Users
#  parameters:
#    - name: user
#      description: The user to return for
#    - name: sort
#      description: How to sort the projects
#    - name: limit
#      description: The maximum amount of projects to return
#    - name: offset
#      description: Where to start searching
#  responses:
#    200:
#      description: Ok
#      content:
#        application/json:
#          schema:
#            $ref: '#/components/schemas/controllers.apiv2.ApiV2Controller.PaginatedCompactProjectResult'
#    401:
#      $ref: '#/components/responses/UnauthorizedError'
#    403:
#      $ref: '#/components/responses/ForbiddenError'
###
GET     /users/:user/watching                                @controllers.apiv2.Users.showWatching(user, sort: Option[ProjectSortingStrategy], limit: Option[Long], offset: Long ?= 0)

### NoDocs ###
GET     /_headerdata                                         @controllers.apiv2.Users.showHeaderData()

###
#  summary: Gets a specific organization
#  description: Gets a specific organization. Requires the `view_public_info` permission.
#  tags:
#    - Organizations
#  parameters:
#    - name: organization
#      description: The organization to return
#  responses:
#    200:
#      description: Ok
#      content:
#        application/json:
#          schema:
#            $ref: '#/components/schemas/models.protocols.APIV2.Organization'
#    401:
#      $ref: '#/components/responses/UnauthorizedError'
#    403:
#      $ref: '#/components/responses/ForbiddenError'
###
GET     /organizations/:organization                         @controllers.apiv2.Organizations.showOrganization(organization)

###
#  summary: Returns the members of an organization
#  description: >-
#    Returns the members of an organization. Requires the `view_public_info` permission.
#    Unless the user also has the 'manage_subject_members' permission, only accepted roles
#    will be shown.
#  tags:
#    - Organizations
#  parameters:
#    - name: organization
#      description: The organization to return members for
#    - name: limit
#      description: The maximum amount of members to return
#    - name: offset
#      description: Where to start returning
#  responses:
#    200:
#      description: Ok
#      content:
#        application/json:
#          schema:
#            type: array
#            items:
#              $ref: '#/components/schemas/models.protocols.APIV2.Member'
#    401:
#      $ref: '#/components/responses/UnauthorizedError'
#    403:
#      $ref: '#/components/responses/ForbiddenError'
###
GET     /organizations/:organization/members                 @controllers.apiv2.Organizations.showMembers(organization, limit: Option[Long], offset: Long ?= 0)

###
#  summary: Updates the members of an organization
#  description: >-
#    Updates the members of an organization. Requires the `manage_subject_members` permission.
#  tags:
#    - Organizations
#  parameters:
#    - name: organization
#      description: The organization to update members for
#  requestBody:
#    required: true
#    content:
#      application/json:
#        schema:
#          type: array
#          items:
#            $ref: '#/components/schemas/controllers.apiv2.helpers.Members.MemberUpdate'
#  responses:
#    204:
#      description: Ok
#    401:
#      $ref: '#/components/responses/UnauthorizedError'
#    403:
#      $ref: '#/components/responses/ForbiddenError'
###
POST    /organizations/:organization/members                 @controllers.apiv2.Organizations.updateMembers(organization)
